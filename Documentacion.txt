Documentacion para la ejecucion el proyecto
Requisitos:
Tener instalado JDK version 17
pasos:
1. Abrir el Proyecto en IntelliJ IDEA:
	-Abre IntelliJ IDEA.
	-Ve a File > Open.
	-Navega hasta la carpeta descomprimida del proyecto y selecciónala. IntelliJ reconocerá automáticamente el proyecto como un proyecto Maven.
2. Importar las Dependencias:
	-IntelliJ detectará Maven automáticamente y te pedirá que importes las dependencias. Si no lo hace, ve a la pestaña de Maven (normalmente en el lado derecho) y selecciona "Reload All Maven Projects".
3. Configurar el JDK
	-Ve a File > Project Structure > Project.
	-Asegúrate de que el Project SDK esté configurado en un JDK compatible con Spring Boot (en este caso JDK 17).
	-Si no está configurado, haz clic en "New..." y selecciona el directorio de instalación del JDK en tu sistema.
4. Configurar el Servidor de Base de Datos, en este caso XAMPP para MySQL:
	-Asegúrate de que el servidor MySQL esté corriendo en XAMPP.
	-Verifica el archivo application.properties o application.yml en el proyecto para los detalles de conexión (como el usuario, la contraseña y el nombre de la base de datos).
	-Configura una base de datos en MySQL que coincida con el archivo de configuración del proyecto.
5. Ejecutar el Proyecto
	-Ve al archivo principal de la aplicación, generalmente ubicado en src/main/java, en la clase que contiene la anotación @SpringBootApplication.
	-Haz clic derecho en la clase principal y selecciona Run 'NombreDeLaClase'.
6. Verificar el Proyecto en el Navegador:
	-Una vez que el proyecto esté corriendo, deberías ver en la consola de IntelliJ algo como:
	-Abre tu navegador y ve a http://localhost:8080 (o el puerto especificado en tu proyecto) para verificar que la aplicación funcione.

----------------
Para probar que la base de datos funciona:
1. Debe ejecutarse el proyecto de springboot en IntelliJ (lo que habilita el puerto localhost:8080)
2. Debe abrirse Xampp y activar el modulo de Apache y MySQL.
3. Se abre visual studio code, y se va hacia la extension Thunder-client (si no la tiene, instalarla)
4. En Thunder-client dar click en New Request. 
  4.1.Para vehiculo con el metodo POST:
	4.1.1 con el método post se redirecciona a la url de la tabla vehiculos
		localhost:8080/api/vehiculo
	4.1.2 En la pestaña del body se ingresan los datos del vehiculo, registro por registo:
		Ejemplo de cuerpo JSON para la solicitud:
		{
  "cilindraje": "1600",
  "color": "Rojo",
  "marca": "Toyota",
  "modelo": "2023",
  "siniestros": 0,
  "placa": "ABC1234",
  "descripcion": "Automóvil en excelente estado, sin daños previos.",
  "poliza": "Póliza completa vigente hasta diciembre 2024.",
  "activo": true
}
{
  "cilindraje": "2000",
  "color": "Azul",
  "marca": "Ford",
  "modelo": "2021",
  "siniestros": 2,
  "placa": "XYZ5678",
  "descripcion": "Vehículo con algunos detalles estéticos, sin daños graves.",
  "poliza": "Cobertura básica vigente hasta junio 2025.",
  "activo": false
}
{
  "cilindraje": "1200",
  "color": "Negro",
  "marca": "Honda",
  "modelo": "2019",
  "siniestros": 0,
  "placa": "LMN2345",
  "descripcion": "Moto en perfecto estado, sin siniestros reportados.",
  "poliza": "Póliza a terceros, vence en enero 2024.",
  "activo": true
}
{
  "cilindraje": "1500",
  "color": "Blanco",
  "marca": "Nissan",
  "modelo": "2022",
  "siniestros": 1,
  "placa": "QRS9012",
  "descripcion": "Auto familiar, un solo incidente menor reportado.",
  "poliza": "Cobertura completa, incluye asistencia en carretera.",
  "activo": true
}
{
  "cilindraje": "1800",
  "color": "Verde",
  "marca": "Kia",
  "modelo": "2018",
  "siniestros": 0,
  "placa": "GHI1234",
  "descripcion": "Auto compacto, mantenimiento al día y sin incidentes.",
  "poliza": "Cobertura completa hasta marzo 2024.",
  "activo": true
}


	4.1.3 Se da click en send.
	4.1.4 Si el envío fue exitoso, el status:200K en color verde aparecerá en la pantalla en el panel derecho.
4.2.Para vehiculo con el metodo GET:
	4.2.1. Se Configura la solicitud con el Método: GET y URL: http://localhost:8080/api/vehiculo?placa=defrgth
		(verifica si un vehículo con la placa “defrgth” existe, la busca y la muestra). 
	4.2.2Envía la solicitud haciendo clic en el botón “Send”.
	4.2.3.Si el vehículo existe, se recibe una respuesta con los detalles del vehículo y el status:200K en color verde aparecerá en la pantalla en el panel derecho. Si no existe, se recibe una respuesta indicando que no se encontró el vehículo. 
 
4.3 Para Usuario con el método POST:
4.3.1. Con el método POST, se redirecciona a la URL de la tabla usuarios:
http://localhost:8080/api/usuario

4.3.2. En la pestaña Body se ingresan los datos del usuario, un registro por vez.
Ejemplo de cuerpo JSON para la solicitud:

json

{
  "nombre": "Juan Pérez",
  "contrasena": "password123",
  "telefono": "3001234567",
  "cedula": "123456789",
  "correo": "juan.perez@example.com",
  "fecha_nacimiento": "1990-05-15",
  "activo": true
}

{
  "nombre": "María López",
  "contrasena": "maria2024",
  "telefono": null,
  "cedula": "987654321",
  "correo": "maria.lopez@example.com",
  "fecha_nacimiento": "1985-03-20",
  "activo": false
}

{
  "nombre": "Carlos Gómez",
  "contrasena": "carlitos_2023",
  "telefono": "3109876543",
  "cedula": "112233445",
  "correo": "carlos.gomez@example.com",
  "fecha_nacimiento": "2000-08-30",
  "activo": true
}
{
  "nombre": "Ana Martínez",
  "contrasena": "anitaSecure99",
  "telefono": "3156781234",
  "cedula": "556677889",
  "correo": "ana.martinez@example.com",
  "fecha_nacimiento": null,
  "activo": true
}
{
  "nombre": "Pedro Ramírez",
  "contrasena": "pedroStrongPass",
  "telefono": "3207654321",
  "cedula": "667788990",
  "correo": "pedro.ramirez@example.com",
  "fecha_nacimiento": "1995-12-10",
  "activo": false
}
4.3.3. Haz clic en Send.

4.3.4. Si el envío fue exitoso, aparecerá el código de estado 200 OK en color verde en el panel derecho.

4.4 Para Usuario con el método GET:
4.4.1. Configura la solicitud con el método GET y la URL:
http://localhost:8080/api/usuario?cedula=123456789
(Esta solicitud verifica si un usuario con la cédula "123456789" existe, lo busca y muestra sus datos).

4.4.2. Haz clic en el botón Send.

4.4.3. Si el usuario existe:

Recibirás una respuesta con los detalles del usuario en la pestaña de response y Aparecerá el código de estado 200 OK en color verde en el panel derecho.
Si no existe: Recibirás una respuesta indicando que no se encontró el usuario, junto con el código de estado correspondiente.

